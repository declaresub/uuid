#tag ClassProtected Class UUID	#tag Method, Flags = &h0		Function Operator_Convert() As String		  #if targetMacOS or targetLinux		    soft declare sub uuid_unparse lib libuuid (ByRef u as uuidBytes, out as Ptr)		    		    dim m as new MemoryBlock(37)		    uuid_unparse uuidData, m		    return m.CString(0)		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Operator_Compare(u2 as UUID) As Integer		  #if targetMacOS or targetLinux		    soft declare function uuid_compare lib libuuid (ByRef uu1 as uuidBytes, ByRef uu2 as uuidBytes) as Integer		    		    dim u2_uuidData as uuidBytes = u2.uuidData		    return uuid_compare(uuidData, u2_uuidData)		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Operator_Convert(value as String)		  #if targetMacOS or targetLinux		    soft declare function uuid_parse lib libuuid (inValue as CString, ByRef uu as uuidBytes) as Integer		    		    dim returnCode as Integer = uuid_parse(value, uuidData)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Bytes() As uuidBytes		  return me.uuidData		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function NewUUIDV1() As UUID		  dim u as new UUID		  u.uuidData = GenerateTime		  return u		  		  'return NewUUID(AddressOf GenerateTime)		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function NewUUIDV4() As UUID		  dim u as new UUID		  u.uuidData = Generate		  return u		  		  'return NewUUID(AddressOf Generate)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function Generate() As uuidBytes		  #if targetMacOS or targetLinux		    soft declare sub uuid_generate lib libuuid (ByRef out as uuidBytes)		    		    dim data as uuidBytes		    uuid_generate data		    return data		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function GenerateTime() As uuidBytes		  #if targetMacOS or targetLinux		    soft declare sub uuid_generate_time lib libuuid (ByRef out as uuidBytes)		    		    dim data as uuidBytes		    uuid_generate_time data		    return data		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub Constructor()		  //exists to prevent use of new operator outside class		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function NewUUID(generator as UUIDGenerator) As UUID		  dim u as new UUID		  u.uuidData = generator.Invoke		  return u		  		  //This method can't be used right now: https://realsoftware.fogbugz.com/default.asp?2398_8mpp8i82		End Function	#tag EndMethod	#tag Note, Name = ReadMe		UUID 5/12/2008				charles@declareSub.com		http://www.declareSub.com				UUID is a class that wraps some C functions for generating and manipulating UUIDs.  Mac OS and Linux are supported.  Were someone to supply the Windows		code, Windows would be supported as well.				The interface consists of the UUID class, and an auxiliary module UUIDModule whose purpose is		to store structure and delegate declarations.						UUID Creation				The UUID class has two shared methods for UUID creation.  NewUUIDV4 returns a version 4 UUID; that is, a randomly generated UUID.  		NewUUIDV1 returns a UUID based on a MAC address and timestamp.  For some situations, the use of a version 1 UUID might be considered a security risk.				You can also create a UUID from a formatted string via an Operator_Convert subroutine.				dim foo as UUID = "1b4e28ba-2fa1-11d2-883f-b9a76"						//UUID Manipulation				You can get the UUID value as a string formatted in a standard format, or as a uuidBytes structure. 				dim s as String = theUUID		dim bytes as uuidBytes = theUUID.Bytes				An Operator_Compare function allows for comparision of UUID objects by value.	#tag EndNote	#tag Property, Flags = &h21		Private uuidData As uuidBytes	#tag EndProperty	#tag Constant, Name = libuuid, Type = String, Dynamic = False, Default = \"/lib/libuuid.so.1", Scope = Private		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"/lib/libuuid.so.1"		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"System.framework"	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass